git init (iniciar novo repositorio dentro de uma pasta (clicar em visualizar arquivos ocultos para visualizar repositorio .git)

git status (visualizr estatus do repositorio)
           Commits -> Verçoes do codigo
           untracked files -> Arquivos que não foram adicionados ao controle de verção e mostra em vermelho quais arquivos não foram adicionados incluidos ao controle de verção.

git add (adicionar arquivo ao controle de verção)
           git add-> digitar comando seguido do nome do arquivo que deseja adicionar ao contro de verção entre aspas duplas (git add "meu codigo.txt" (o nome do arquivo estara em vermelho no "untracked files"))

git add . (adicionando todos os arquivos pendentes ao controle de verção)

git commit -m "" (criando verção do arquivo (entre aspas duplas colocar o que foi feito na verção))
           git config --global user.email "gaabrenno@gamil.com"
           git config --global user.name "Gabriel Brenno"
git puhs (Enviar verção do arquivo para o repositorio no git hub)
           criar repositorio no GitHub 
           git remote add origin (colar link do repositorio)
           git push -> copiar codigo disponibilizado e colar novamente dando enter
           abrirá um popap do GitHub para logar (caso seja a primeira vez) 

Criando nova verção (após editar codigo)

git status (aparecerá em vermelho o arquivo que foi medificado)

git add. (rodar comando git status para ter certeza que o arquivo foi adicionado)

git commit -m "atualização" (entre aspas adicionar a modificação do codigo)

git push 


git reflog -> verificar historico de verções (verção atual esta no topo)


Navegando entre verções do código



git reset --hard -> Voltando a uma verção anterior -> após apresentar codigo git reflog copiar ID da verção a ser restarurada
     


Branch

git branch -> vc vera quais brenchs estão abertas (se não tem nenhuma aparecerá apenas a principal, a master)
git branch stanging (stanging é apenas o nome da nova branch)
git checkout (nome da branch)
ao criar uma nova branch e editar o código no momento de dar push ele pedira para rodar um novo código que o proprio git irá disponibilizar, basta copiar e colar.

Merge
Para passar o código de uma branch para a outra (da branch stanging para a master por exemplo)
          git checkout master (passar para a branch que irá receber as atualizações)
          git pull (para trazer as atualizações do servirdor para a maquina para não subir as atualizações em uma verção antiga
          git merge staging (digrar a branch que irá ceder as atualizações)
          git push (para subir as atualizações)

git chechout -b nome-da-nova-branch master(comando que une o comando git branch stanging e git checkout criando e entrando uma nova branch)


Pull Request (um merge democrático)
    Após editar a nova branch solicitar o pull request diretamente no GitHub
          git add . (para adicionar as atualizações)
          git commit -m "atualização"
          git push (para mandar para a nuvem)
    No GitHub verificar atualização na pagina do repositorio
          Clicar no botão verde (compare & pull request)
          Dizer de onde para onde eu quero mergiar
          colocar o titulo (já vai estar a mensagem do commit) colocar uma mensagem e clicar em create pull request
          Agora é só aguradar os Reviewers aprovarem ou não o pull request e mergear os códigos



Git Ignore (Ignorar arquivos que não quero enviar com o controle de verção)

          touch .gitignore vai criar um arquivo .txt
          digitar o nome do arquivo seguido de / no arquivo .gitignore
          git add .
          git commit -m "adicionando arquivo gitignore"

https://www.youtube.com/watch?v=kB5e-gTAl_s
Fim do curso 
